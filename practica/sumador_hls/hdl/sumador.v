// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sumador,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.735000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=65,HLS_SYN_LUT=180}" *)

module sumador (
        ap_clk,
        ap_rst_n,
        a_TDATA,
        a_TVALID,
        a_TREADY,
        b_TDATA,
        b_TVALID,
        b_TREADY,
        sum_TDATA,
        sum_TVALID,
        sum_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input  [7:0] a_TDATA;
input   a_TVALID;
output   a_TREADY;
input  [7:0] b_TDATA;
input   b_TVALID;
output   b_TREADY;
output  [7:0] sum_TDATA;
output   sum_TVALID;
input   sum_TREADY;

reg    ap_rst_n_inv;
reg   [7:0] a_0_data_out;
wire    a_0_vld_in;
wire    a_0_vld_out;
wire    a_0_ack_in;
reg    a_0_ack_out;
reg   [7:0] a_0_payload_A;
reg   [7:0] a_0_payload_B;
reg    a_0_sel_rd;
reg    a_0_sel_wr;
wire    a_0_sel;
wire    a_0_load_A;
wire    a_0_load_B;
reg   [1:0] a_0_state;
wire    a_0_state_cmp_full;
reg   [7:0] b_0_data_out;
wire    b_0_vld_in;
wire    b_0_vld_out;
wire    b_0_ack_in;
reg    b_0_ack_out;
reg   [7:0] b_0_payload_A;
reg   [7:0] b_0_payload_B;
reg    b_0_sel_rd;
reg    b_0_sel_wr;
wire    b_0_sel;
wire    b_0_load_A;
wire    b_0_load_B;
reg   [1:0] b_0_state;
wire    b_0_state_cmp_full;
reg   [7:0] sum_1_data_out;
reg    sum_1_vld_in;
wire    sum_1_vld_out;
wire    sum_1_ack_in;
wire    sum_1_ack_out;
reg   [7:0] sum_1_payload_A;
reg   [7:0] sum_1_payload_B;
reg    sum_1_sel_rd;
reg    sum_1_sel_wr;
wire    sum_1_sel;
wire    sum_1_load_A;
wire    sum_1_load_B;
reg   [1:0] sum_1_state;
wire    sum_1_state_cmp_full;
reg    a_TDATA_blk_n;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state3;
reg    b_TDATA_blk_n;
reg    sum_TDATA_blk_n;
wire   [7:0] tmp_2_fu_67_p1;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
wire   [3:0] tmp_1_fu_57_p1;
wire   [3:0] tmp_fu_53_p1;
wire   [3:0] sum_assign_fu_61_p2;
reg   [0:0] ap_CS_iter0_fsm;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter0_fsm_state1;

// power-on initialization
initial begin
#0 a_0_sel_rd = 1'b0;
#0 a_0_sel_wr = 1'b0;
#0 a_0_state = 2'd0;
#0 b_0_sel_rd = 1'b0;
#0 b_0_sel_wr = 1'b0;
#0 b_0_state = 2'd0;
#0 sum_1_sel_rd = 1'b0;
#0 sum_1_sel_wr = 1'b0;
#0 sum_1_state = 2'd0;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_CS_iter0_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_0_ack_out) & (1'b1 == a_0_vld_out))) begin
            a_0_sel_rd <= ~a_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_0_ack_in) & (1'b1 == a_0_vld_in))) begin
            a_0_sel_wr <= ~a_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == a_0_vld_in) & (2'd2 == a_0_state)) | ((1'b0 == a_0_vld_in) & (1'b1 == a_0_ack_out) & (2'd3 == a_0_state)))) begin
            a_0_state <= 2'd2;
        end else if ((((1'b0 == a_0_ack_out) & (2'd1 == a_0_state)) | ((1'b0 == a_0_ack_out) & (1'b1 == a_0_vld_in) & (2'd3 == a_0_state)))) begin
            a_0_state <= 2'd1;
        end else if (((~((1'b0 == a_0_vld_in) & (1'b1 == a_0_ack_out)) & ~((1'b0 == a_0_ack_out) & (1'b1 == a_0_vld_in)) & (2'd3 == a_0_state)) | ((1'b1 == a_0_ack_out) & (2'd1 == a_0_state)) | ((1'b1 == a_0_vld_in) & (2'd2 == a_0_state)))) begin
            a_0_state <= 2'd3;
        end else begin
            a_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_sel_rd <= 1'b0;
    end else begin
        if (((b_0_ack_out == 1'b1) & (b_0_vld_out == 1'b1))) begin
            b_0_sel_rd <= ~b_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_sel_wr <= 1'b0;
    end else begin
        if (((b_0_ack_in == 1'b1) & (b_0_vld_in == 1'b1))) begin
            b_0_sel_wr <= ~b_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_state <= 2'd0;
    end else begin
        if ((((b_0_vld_in == 1'b0) & (b_0_state == 2'd2)) | ((b_0_vld_in == 1'b0) & (b_0_state == 2'd3) & (b_0_ack_out == 1'b1)))) begin
            b_0_state <= 2'd2;
        end else if ((((b_0_ack_out == 1'b0) & (b_0_state == 2'd1)) | ((b_0_ack_out == 1'b0) & (b_0_state == 2'd3) & (b_0_vld_in == 1'b1)))) begin
            b_0_state <= 2'd1;
        end else if (((~((b_0_vld_in == 1'b0) & (b_0_ack_out == 1'b1)) & ~((b_0_ack_out == 1'b0) & (b_0_vld_in == 1'b1)) & (b_0_state == 2'd3)) | ((b_0_state == 2'd1) & (b_0_ack_out == 1'b1)) | ((b_0_state == 2'd2) & (b_0_vld_in == 1'b1)))) begin
            b_0_state <= 2'd3;
        end else begin
            b_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sum_1_sel_rd <= 1'b0;
    end else begin
        if (((sum_1_ack_out == 1'b1) & (sum_1_vld_out == 1'b1))) begin
            sum_1_sel_rd <= ~sum_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sum_1_sel_wr <= 1'b0;
    end else begin
        if (((sum_1_ack_in == 1'b1) & (sum_1_vld_in == 1'b1))) begin
            sum_1_sel_wr <= ~sum_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        sum_1_state <= 2'd0;
    end else begin
        if ((((sum_1_vld_in == 1'b0) & (sum_1_state == 2'd2)) | ((sum_1_vld_in == 1'b0) & (sum_1_state == 2'd3) & (sum_1_ack_out == 1'b1)))) begin
            sum_1_state <= 2'd2;
        end else if ((((sum_1_ack_out == 1'b0) & (sum_1_state == 2'd1)) | ((sum_1_ack_out == 1'b0) & (sum_1_state == 2'd3) & (sum_1_vld_in == 1'b1)))) begin
            sum_1_state <= 2'd1;
        end else if (((~((sum_1_vld_in == 1'b0) & (sum_1_ack_out == 1'b1)) & ~((sum_1_ack_out == 1'b0) & (sum_1_vld_in == 1'b1)) & (sum_1_state == 2'd3)) | ((sum_1_state == 2'd1) & (sum_1_ack_out == 1'b1)) | ((sum_1_state == 2'd2) & (sum_1_vld_in == 1'b1)))) begin
            sum_1_state <= 2'd3;
        end else begin
            sum_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_0_load_A)) begin
        a_0_payload_A <= a_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_0_load_B)) begin
        a_0_payload_B <= a_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_0_load_A == 1'b1)) begin
        b_0_payload_A <= b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_0_load_B == 1'b1)) begin
        b_0_payload_B <= b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((sum_1_load_A == 1'b1)) begin
        sum_1_payload_A <= tmp_2_fu_67_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((sum_1_load_B == 1'b1)) begin
        sum_1_payload_B <= tmp_2_fu_67_p1;
    end
end

always @ (*) begin
    if ((~((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0) | ((sum_1_ack_in == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        a_0_ack_out = 1'b1;
    end else begin
        a_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_0_sel)) begin
        a_0_data_out = a_0_payload_B;
    end else begin
        a_0_data_out = a_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        a_TDATA_blk_n = a_0_state[1'd0];
    end else begin
        a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0) | ((sum_1_ack_in == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        b_0_ack_out = 1'b1;
    end else begin
        b_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_0_sel == 1'b1)) begin
        b_0_data_out = b_0_payload_B;
    end else begin
        b_0_data_out = b_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        b_TDATA_blk_n = b_0_state[1'd0];
    end else begin
        b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((sum_1_sel == 1'b1)) begin
        sum_1_data_out = sum_1_payload_B;
    end else begin
        sum_1_data_out = sum_1_payload_A;
    end
end

always @ (*) begin
    if ((~((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0) | ((sum_1_ack_in == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        sum_1_vld_in = 1'b1;
    end else begin
        sum_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) | (1'b1 == ap_CS_iter1_fsm_state2))) begin
        sum_TDATA_blk_n = sum_1_state[1'd1];
    end else begin
        sum_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0) | ((sum_1_ack_in == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0) | ((sum_1_ack_in == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) & (1'b0 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((sum_1_ack_in == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0)) & (1'b1 == ap_CS_iter1_fsm_state2) & (sum_1_ack_in == 1'b1))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if (((sum_1_ack_in == 1'b1) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0)))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out) | (sum_1_ack_in == 1'b0) | ((sum_1_ack_in == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign a_0_ack_in = a_0_state[1'd1];

assign a_0_load_A = (~a_0_sel_wr & a_0_state_cmp_full);

assign a_0_load_B = (a_0_state_cmp_full & a_0_sel_wr);

assign a_0_sel = a_0_sel_rd;

assign a_0_state_cmp_full = ((a_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_0_vld_in = a_TVALID;

assign a_0_vld_out = a_0_state[1'd0];

assign a_TREADY = a_0_state[1'd1];

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((b_0_vld_out == 1'b0) | (1'b0 == a_0_vld_out));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (sum_1_ack_in == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_0_ack_in = b_0_state[1'd1];

assign b_0_load_A = (~b_0_sel_wr & b_0_state_cmp_full);

assign b_0_load_B = (b_0_state_cmp_full & b_0_sel_wr);

assign b_0_sel = b_0_sel_rd;

assign b_0_state_cmp_full = ((b_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_0_vld_in = b_TVALID;

assign b_0_vld_out = b_0_state[1'd0];

assign b_TREADY = b_0_state[1'd1];

assign sum_1_ack_in = sum_1_state[1'd1];

assign sum_1_ack_out = sum_TREADY;

assign sum_1_load_A = (sum_1_state_cmp_full & ~sum_1_sel_wr);

assign sum_1_load_B = (sum_1_state_cmp_full & sum_1_sel_wr);

assign sum_1_sel = sum_1_sel_rd;

assign sum_1_state_cmp_full = ((sum_1_state != 2'd1) ? 1'b1 : 1'b0);

assign sum_1_vld_out = sum_1_state[1'd0];

assign sum_TDATA = sum_1_data_out;

assign sum_TVALID = sum_1_state[1'd0];

assign sum_assign_fu_61_p2 = (tmp_1_fu_57_p1 + tmp_fu_53_p1);

assign tmp_1_fu_57_p1 = b_0_data_out[3:0];

assign tmp_2_fu_67_p1 = sum_assign_fu_61_p2;

assign tmp_fu_53_p1 = a_0_data_out[3:0];




`ifdef COCOTB_SIM
    initial begin
        $dumpfile("./sim_build/waveform.vcd");
        $dumpvars (0, sumador);
    end
`endif

endmodule
